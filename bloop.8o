#-------------------------------------#
#  bloop
#  author: jackie kircher
#-------------------------------------#

#-- sprites --------------------------#

: octopus #11x12 (SUPERCHIP)
  0x0F 0x00 0x1F 0x80 0x1F 0x80 0x1F 0x80
  0x1F 0x80 0x0A 0x80 0x0F 0x00 0x1A 0x80
  0x2A 0x80 0x2A 0x80 0xAA 0xA0 0x51 0x40
  0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

: octopus-head #6x7
  0x78 0xFC 0xFC 0xFC 0xFC 0x54 0x78

: dot
  0x80

: empty
  0x00 0x00 0x00 0x00 0x00 0x00 0x00

: puzzle-text #11x16 (SUPERCHIP)
  0xE0 0x00 0x90 0x00 0x90 0x00 0x90 0x00
  0xE0 0x04 0x80 0x04 0xAB 0x84 0xA8 0x84
  0xA9 0x74 0xBA 0x14 0x03 0xA6 0x00 0x40
  0x00 0x70 0x00 0x00 0x00 0x00 0x00 0x00
: puzzle-text2 #10x3
  0x00 0x00 0x00 0x00 0x00 0xE0 0xA0 0xC0
  0x80 0xE0

: title-text-O #
  0x07 0xF0 0x1F 0xF8 0x3F 0xFC 0x7F 0xFE
  0xFE 0x7E 0xFC 0x3E 0xF8 0x1E 0xF0 0x1E
  0xF0 0x1E 0xF0 0x3E 0xF8 0x3E 0xFC 0x7C
  0xFF 0xFC 0x7F 0xF8 0x7F 0xF0 0x1F 0xE0
: title-text-C #
  0x1F 0xF8 0x3F 0xF8 0x7F 0xF8 0x7E 0x38
  0xFC 0x00 0xF8 0x00 0xF8 0x00 0xF0 0x00
  0xF0 0x00 0xF0 0x1C 0xF8 0x3C 0xFC 0x7C
  0xFF 0xFC 0x7F 0xF8 0x7F 0xF0 0x1F 0xC0
: title-text-T #
  0x00 0x0F 0x03 0xFF 0x1F 0xFF 0xFF 0xFF
  0xFF 0xF8 0xFF 0xC0 0xF3 0xC0 0x03 0xC0
  0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0xC0
  0x03 0xC0 0x03 0xC0 0x03 0xC0 0x03 0x80
: title-text-V #
  0x00 0x1E 0x30 0x1E 0x70 0x3E 0xF0 0x3C
  0xF0 0x7C 0xF0 0x78 0xF0 0xF8 0xF8 0xF0
  0x79 0xF0 0x79 0xE0 0x7B 0xE0 0x7F 0xC0
  0x3F 0xC0 0x3F 0x80 0x1F 0x00 0x1E 0x00
: title-text-R #
  0x1F 0x80 0x7F 0xC0 0x7F 0xE0 0xF8 0xE0
  0xF0 0xE0 0xF1 0xE0 0xFF 0xE0 0xFF 0xC0
  0xFF 0xE0 0xF3 0xF0 0xF1 0xF0 0xF0 0xF0
  0xF0 0xF0 0xF0 0xE0 0xF0 0x00 0xE0 0x00
: title-text-E #
  0x01 0xC0 0x07 0xC0 0x1F 0xC0 0x7F 0x00
  0xFC 0x00 0xF0 0x00 0xF0 0x00 0xFC 0x00
  0xFC 0x00 0xF8 0x00 0xF0 0xF0 0xF3 0xF0
  0xFF 0xF0 0xFF 0xC0 0xFF 0x00 0x7C 0x00

: versus-text #12x16 (SUPERCHIP)
  0x02 0x00 0x82 0x00 0x82 0x00 0x84 0x00
  0x84 0x00 0x88 0x00 0x88 0x73 0x57 0x54
  0x54 0x67 0x66 0x51 0x64 0x56 0x07 0x00
  0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

: versus-text2 #12x8
  0x00 0x00 0x00 0x00 0x00 0x00 0x03 0x54
  0x57 0x51 0x56 0x70



# food
: fish-left #7x3
  0x30 0x4A 0x84 0x7A 0x00 0x00 0x00
: fish-right #7x4
  0x18 0xA4 0x42 0xBC 0x00 0x00 0x00
: speck #3x3
  0x40 0xA0 0x40 0x00 0x00 0x00 0x00
: sushi #4x4
  0x60 0x90 0xF0 0x60 0x00 0x00 0x00
: shrimp-fried-left #7x7
  0x60 0x90 0x90 0x68 0x18 0x06 0x04
: shrimp-fried-right #7x7
  0x04 0x06 0x18 0x68 0x90 0x90 0x60
: donut #7x7
  0x38 0x44 0x92 0xAA 0x92 0x44 0x38
: chips #9x11 (SUPERCHIP)
  0xFF 0x80 0x40 0x80 0x40 0x80 0x8C 0x80
  0x92 0x80 0x92 0x80 0xA2 0x80 0xA4 0x80
  0x99 0x00 0x81 0x00 0xFF 0x80

: food-table
  i := empty              return
  i := fish-left          return
  i := fish-right         return
  i := speck              return
  i := sushi              return
  i := shrimp-fried-left  return
  i := shrimp-fried-right return
  i := donut              return
;

  :const FISHLEFT         1
  :const FIGHRIGHT        2
  :const SPECK            3
  :const SUSHI            4
  :const SHRIMPFRIEDLEFT  5
  :const SHRIMPFRIEDRIGHT 6
  :const DONUT            7
  :const CHIPS            8


#-- setup ----------------------------#

  # registers
  :alias arm1_x va
  :alias arm1_y vb
  :alias arm2_x vc
  :alias arm2_y vd

  # directions
  # these are all weird looking so that two cardinal directions
  # can be added together to make a diagonal direction
  #
  # UP + DOWN  -> 0
  # UP + RIGHT -> UPRIGHT
  #
  :const UP        -1
  :const LEFT      -3
  :const DOWN       1
  :const RIGHT      3
  :const UPLEFT    -4
  :const UPRIGHT    2
  :const STOP       0
  :const DOWNLEFT  -2
  :const DOWNRIGHT  4

  :const FALSE 0
  :const TRUE  1

  :const ARM1XOFFSET 0
  :const ARM1YOFFSET 7
  :const ARM2XOFFSET 6
  :const ARM2YOFFSET 7

  # game-state
  : arm1-direction -3
  : arm2-direction  3
  : game-mode       1
  : current-level   1
  : food-remaining  4

  : board-food
  # type ---  taken --- x pos --- y pos
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0xFF      0x00      0x00      0x00

: setup
  hires
;

: menu-screen
  draw-menu-screen

  v3 := 0xC
  v4 := 0xD
  loop
    if v4 key then select-player
    if v3 -key then
  again
;

: select-player
  i := game-mode
  load v0

  # toggle the player select sushi
  if v0 == 1 begin
    v1 := 21
    v2 := 48
    i  := sushi
    sprite v1 v2 4

    v1 := 71
    v2 := 48
    i  := sushi
    sprite v1 v2 4
  end

  if v0 == 2 begin
    v1 := 71
    v2 := 48
    i  := sushi
    sprite v1 v2 4

    v1 := 21
    v2 := 48
    i  := sushi
    sprite v1 v2 4
  end

  # toggle the game mode
  if v0 == 1 then v1 := 2
  if v0 == 2 then v1 := 1
  i  := game-mode
  v0 := v1
  save v0

  # delay to avoid double inputs
  v0    := 10
  delay := v0
  loop
    v0 := delay
    if v0 != 0 then
  again
;


#-- drawing --------------------------#

: draw-menu-screen

    v1 := 8
    v2 := 17
    i  := title-text-O
    sprite v1 v2 0

    v1 := 22
    v2 := 14
    i  := title-text-C
    sprite v1 v2 0

    v1 := 34
    v2 := 10
    i  := title-text-T
    sprite v1 v2 0

    v1 := 49
    v2 := 7
    i  := title-text-O
    sprite v1 v2 0

    v1 := 61
    v2 := 20
    i  := title-text-V
    sprite v1 v2 0

    v1 := 74
    v2 := 16
    i  := title-text-O
    sprite v1 v2 0

    v1 := 88
    v2 := 13
    i  := title-text-R
    sprite v1 v2 0

    v1 := 100
    v2 := 9
    i  := title-text-E
    sprite v1 v2 0

    v1 := 28
    v2 := 45
    i  := puzzle-text
    sprite v1 v2 0
    i  := puzzle-text2
    v1 += 16
    sprite v1 v2 10

    v1 := 78
    v2 := 45
    i  := versus-text
    sprite v1 v2 0
    i  := versus-text2
    v1 += 16
    sprite v1 v2 12

    v1 := 21
    v2 := 48
    i  := sushi
    sprite v1 v2 4
;

: draw-octopus
  # arguments:
  #   v1 -> octopus x pos
  #   v2 -> octopus y pos

  # draw the octopus head
  i := octopus-head
  sprite v1 v2 7

  # start arm1 (left) below the head
  v2 += ARM1YOFFSET
  arm1_x := v1
  arm1_y := v2
  draw-arm1

  # start arm2 (right) below the head
  v1 += ARM2XOFFSET
  arm2_x := v1
  arm2_y := v2
  draw-arm2

  # reset arm directions
  i  := arm1-direction
  v0 := LEFT
  save v0

  i  := arm2-direction
  v0 := RIGHT
  save v0
;

# draws the tentacle
: draw-arm1
  i := dot
  sprite arm1_x arm1_y 1
;

: draw-arm2
  i := dot
  sprite arm2_x arm2_y 1
;

: draw-board
  i  := board-food
  load v3
  # v0 -> food-type
  # v1 -> food-taken
  # v2 -> food-x
  # v3 -> food-y

  v4 := 0
  loop
    while v0 != 0xFF
      if v1 == 0 begin
        v0 <<= v0
        v0 <<= v0
        select-food
        sprite v2 v3 7
      end

      v4 += 4
      i  := board-food
      i  += v4
      load v3
  again
;

: select-food
  jump0 food-table
;


#-- levels ---------------------------#

: level-1
  # food-counter
  0x03

  # starting-position
  0x3C 0x18

: level-1-food
  # type ---  taken --- x pos --- y pos
    0x05      0x00      0x0A      0x0A
    0x07      0x00      0x70      0x0A
    0x02      0x00      0x3C      0x30
    0xFF      0x00      0x00      0x00

: create-level-1
  clear

  i := level-1
  load v2
  # v0 -> number of foods
  # v1 -> starting x pos
  # v2 -> starting y pos

  i := food-remaining
  save v0

  draw-octopus

  # load the level 1 food into the board
  i := level-1-food
  load v3

  v4 := 0
  loop
    while v0 != 0xFF
      i := board-food
      i += v4
      save v3

      v4 += 4
      i  := level-1-food
      i  += v4
      load v3
  again

  draw-board

  countdown
;

: level-2
  # food-counter
  0x07

  # starting-position
  0x10 0x06

: level-2-food
  # type ---  taken --- x pos --- y pos
    0x04      0x00      0x2A      0x08
    0x04      0x00      0x2A      0x16
    0x04      0x00      0x2A      0x34
    0x04      0x00      0x3A      0x34
    0x04      0x00      0x4A      0x34
    0x04      0x00      0x6A      0x10
    0x04      0x00      0x6A      0x28
    0xFF      0x00      0x00      0x00

: create-level-2
  clear

  i := level-2
  load v2
  # v0 -> number of foods
  # v1 -> starting x pos
  # v2 -> starting y pos

  i := food-remaining
  save v0

  draw-octopus

  # load the level 1 food into the board
  i := level-2-food
  load v3

  v4 := 0
  loop
    while v0 != 0xFF
      i := board-food
      i += v4
      save v3

      v4 += 4
      i  := level-2-food
      i  += v4
      load v3
  again

  draw-board

  countdown
;


#-- movement -------------------------#

: steer-arm1
  :alias input v1

  i := arm1-direction
  load v0

# v1 -> new arm direction
  v2 := 0
  input := 0x2 #2
  if input key then v2 += UP
  input := 0x4 #q
  if input key then v2 += LEFT
  input := 0x5 #w
  if input key then v2 += DOWN
  input := 0x6 #e
  if input key then v2 += RIGHT

# can't stop won't stop
  if v2 == 0 then return

# no going back
  v1 := v0
  v1 += v2
  if v1 == 0 then return

  v0 := v2
  i  := arm1-direction
  save v0
;

: steer-arm2
  :alias input v1

  i := arm2-direction
  load v0

# v1 -> new arm direction
  v2 := 0
  input := 0x8 #s
  if input key then v2 += UP
  input := 0xA #z
  if input key then v2 += LEFT
  input := 0x0 #x
  if input key then v2 += DOWN
  input := 0xB #c
  if input key then v2 += RIGHT

# can't stop won't stop
  if v2 == 0 then return

# no going back
  v1 := v0
  v1 += v2
  if v1 == 0 then return

  v0 := v2
  i  := arm2-direction
  save v0
;

: move-arm1
  i := arm1-direction
  load v0
  v1 := 0
  v2 := 0
  translate-movement

  arm1_x += v1
  arm1_y += v2
  draw-arm1
;

: move-arm2
  i := arm2-direction
  load v0
  v1 := 0
  v2 := 0
  translate-movement

  arm2_x += v1
  arm2_y += v2
  draw-arm2
;

: translate-movement
  # arguments:
  #   v0 -> direction
  #   v1 -> x
  #   v2 -> y

  if v0 == UPLEFT    then v1 += -1
  if v0 == LEFT      then v1 += -1
  if v0 == DOWNLEFT  then v1 += -1
  if v0 == UPRIGHT   then v1 +=  1
  if v0 == RIGHT     then v1 +=  1
  if v0 == DOWNRIGHT then v1 +=  1

  if v0 == UPLEFT    then v2 += -1
  if v0 == UP        then v2 += -1
  if v0 == UPRIGHT   then v2 += -1
  if v0 == DOWNLEFT  then v2 +=  1
  if v0 == DOWN      then v2 +=  1
  if v0 == DOWNRIGHT then v2 +=  1
;

: collect-food
  i  := board-food
  load v3

  v4 := 0
  v5 := 0
  loop
    while v0 != 0xFF
      if v1 == 0 begin
        # draw the food twice - the first time we're guaranteed
        # collisions and if an arm has hit the food the redraw
        # will set vf appropriately
        v0 <<= v0
        v0 <<= v0
        select-food
        sprite v2 v3 7
        sprite v2 v3 7

        if vf == 1 begin
          v5 := 1

          # the arm has hit the food! collect it
          v0 >>= v0
          v0 >>= v0
          v1 := TRUE
          i  := board-food
          i  += v4
          save v1

          # and undraw it again
          v0 <<= v0
          v0 <<= v0
          select-food
          sprite v2 v3 7

          i  := food-remaining
          load v0
          v0 += -1
          i  := food-remaining
          save v0
        end
      end

      v4 += 4
      i  := board-food
      i  += v4
      load v3
  again

  vf := 0
  if v5 == 1 then vf := 1
;

: check-collision
  if vf == 1 begin
    # flash all foods that haven't been collected
    # and collect food that triggered conflict
    collect-food

    # if food was collected the game shouldn't end yet
    if vf == 1 then return

    restart-level
  end
;


#-- game progression -----------------#

: next-level
  v9 := 1
  v1 := 1
  v2 := 3
  v3 := 0xF
  if v1 -key then v9 := 0
  if v2 -key then v9 := 0
  if v3 -key then v9 := 0
  if v9 == 1 then jump skip-level

  i := food-remaining
  load v0
  if v0 > 0 then return

  countdown

: skip-level
  i  := current-level
  load v0

  v0 += 1
  i  := current-level
  save v0

  if v0 == 2 then create-level-2
  if v0 == 3 then victory
;

: restart-level
  countdown

  i  := current-level
  load v0

  if v0 == 1 then create-level-1
  if v0 == 2 then create-level-2
;

: countdown
  v1 := 0
  loop
    v1 += 1
    while v1 < 7
      draw-arm1
      draw-arm2
      v0    := 30
      delay := v0
      loop
        v0 := delay
        if v0 != 0 then
      again
  again
;


#-- main -----------------------------#

: main
  setup

  menu-screen

  i := game-mode
  load v0

  if v0 == 1 then puzzle-mode
  if v0 == 2 then versus
;

: puzzle-mode

  create-level-1

  loop
    steer-arm1
    move-arm1
    check-collision

    steer-arm2
    move-arm2
    check-collision

    next-level
  again
;

: versus
;

: victory
  exit
;
