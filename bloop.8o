#----------------------------#
#  bloop
#  author: jackie kircher
#----------------------------#

#-- sprites --#
: octopus #11x12 (SUPERCHIP)
  0x0F 0x00 0x1F 0x80 0x1F 0x80 0x1F 0x80
  0x1F 0x80 0x0A 0x80 0x0F 0x00 0x1A 0x80
  0x2A 0x80 0x2A 0x80 0xAA 0xA0 0x51 0x40
  0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

: octopus-head #6x7
  0x78 0xFC 0xFC 0xFC 0xFC 0x54 0x78

: dot
  0x80

# food
: fish-left #7x3
  0x30 0x4A 0x84 0x7A
: fish-right #7x4
  0x18 0xA4 0x42 0xBC
: speck #3x3
  0x40 0xA0 0x40
: sushi #4x4
  0x60 0x90 0xF0 0x60
: shrimp-fried #7x7
  0x60 0x90 0x90 0x68 0x18 0x06 0x04
: shrimp-fried-flipped #7x7
  0x04 0x06 0x18 0x68 0x90 0x90 0x60
: donut #7x7
  0x38 0x44 0x92 0xAA 0x92 0x44 0x38
: chips #9x11 (SUPERCHIP)
  0xFF 0x80 0x40 0x80 0x40 0x80 0x8C 0x80
  0x92 0x80 0x92 0x80 0xA2 0x80 0xA4 0x80
  0x99 0x00 0x81 0x00 0xFF 0x80



#-- setup --#

  # registers
  :alias arm1_x va
  :alias arm1_y vb
  :alias arm2_x vc
  :alias arm2_y vd

  # directions
  # these are all weird looking so that two cardinal directions
  # can be added together to make a diagonal direction
  #
  # UP + DOWN  -> 0
  # UP + RIGHT -> UPRIGHT
  #
  :const UP        -1
  :const LEFT      -3
  :const DOWN       1
  :const RIGHT      3
  :const UPLEFT    -4
  :const UPRIGHT    2
  :const STOP       0
  :const DOWNLEFT  -2
  :const DOWNRIGHT  4

  :const FALSE 0
  :const TRUE  1

  # game-state
  : arm1-direction -3
  : arm2-direction  3

  : shrimp-collected 0

: setup
  hires
;


#-- drawing --#

# draws the tentacle
: draw-arm1
  i := dot
  sprite arm1_x arm1_y 1
;

: draw-arm2
  i := dot
  sprite arm2_x arm2_y 1
;


# -- main --#

: main
  setup

  # draw the octopus head
  # v1 -> x coordinate
  # v2 -> y coordinate
  v1 := 60
  v2 := 24
  i  := octopus-head
  sprite v1 v2 7

  # start arm1 (left) below the head
  arm1_x := 60
  arm1_y := 31
  draw-arm1

  # start arm2 (right) below the head
  arm2_x := 66
  arm2_y := 31
  draw-arm2

# v1 -> test food x coord
  v1 := 10
  v2 := 10
  i  := shrimp-fried
  sprite v1 v2 7

  loop
    steer-arm1
    move-arm1
    check-collision

    steer-arm2
    move-arm2
    check-collision
  again
;

: steer-arm1
  :alias input v1

  i := arm1-direction
  load v0

# v1 -> new arm direction
  v2 := 0
  input := 0x2 #2
  if input key then v2 += UP
  input := 0x4 #q
  if input key then v2 += LEFT
  input := 0x5 #w
  if input key then v2 += DOWN
  input := 0x6 #e
  if input key then v2 += RIGHT

# can't stop won't stop
  if v2 == 0 then return

# no going back
  v1 := v0
  v1 += v2
  if v1 == 0 then return

  v0 := v2
  i  := arm1-direction
  save v0
;

: steer-arm2
  :alias input v1

  i := arm2-direction
  load v0

# v1 -> new arm direction
  v2 := 0
  input := 0x8 #s
  if input key then v2 += UP
  input := 0xA #z
  if input key then v2 += LEFT
  input := 0x0 #x
  if input key then v2 += DOWN
  input := 0xB #c
  if input key then v2 += RIGHT

# can't stop won't stop
  if v2 == 0 then return

# no going back
  v1 := v0
  v1 += v2
  if v1 == 0 then return

  v0 := v2
  i  := arm2-direction
  save v0
;

: move-arm1
  i := arm1-direction
  load v0
  v1 := 0
  v2 := 0
  translate-movement

  arm1_x += v1
  arm1_y += v2
  draw-arm1
;

: move-arm2
  i := arm2-direction
  load v0
  v1 := 0
  v2 := 0
  translate-movement

  arm2_x += v1
  arm2_y += v2
  draw-arm2
;

: translate-movement
  # arguments:
  #   v0 -> direction
  #   v1 -> x
  #   v2 -> y

  if v0 == UPLEFT    then v1 += -1
  if v0 == LEFT      then v1 += -1
  if v0 == DOWNLEFT  then v1 += -1
  if v0 == UPRIGHT   then v1 +=  1
  if v0 == RIGHT     then v1 +=  1
  if v0 == DOWNRIGHT then v1 +=  1

  if v0 == UPLEFT    then v2 += -1
  if v0 == UP        then v2 += -1
  if v0 == UPRIGHT   then v2 += -1
  if v0 == DOWNLEFT  then v2 +=  1
  if v0 == DOWN      then v2 +=  1
  if v0 == DOWNRIGHT then v2 +=  1
;

: collect-food
  i := shrimp-collected
  load v0
  if v0 == TRUE then vf := 0
  if v0 == TRUE then return
  # since the shrimp has laready been collected we don't need to
  # check for collisions with it

  # draw the shrimp twice - the first time we're guaranteed collisions
  # and if an arm has hit th food the redraw will set vf appropriately
  v1 := 10
  i  := shrimp-fried
  sprite v1 v1 7

  v1 := 10
  i  := shrimp-fried
  sprite v1 v1 7

  if vf == 1 begin
    # the arm has hit the food! collect it
    i  := shrimp-collected
    v0 := TRUE
    save v0

    # and undraw it again
    v1 := 10
    i  := shrimp-fried
    sprite v1 v1 7
  end
;

: check-collision
  if vf == 1 begin
    # flash all foods that haven't been collected
    # and collect food that triggered conflict
    collect-food

    # if food was collected the game shouldn't end yet
    if vf == 1 then return

    game-over
  end
;

: game-over
  loop
    draw-arm1
    v0    := 10
    delay := v0
    loop
      v0 := delay
      if v0 != 0 then
    again
  again
;
