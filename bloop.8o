#----------------------------#
#  bloop
#  author: jackie kircher
#----------------------------#

#-- sprites --#
: octopus #11x12 (SUPERCHIP)
  0x0F 0x00 0x1F 0x80 0x1F 0x80 0x1F 0x80
  0x1F 0x80 0x0A 0x80 0x0F 0x00 0x1A 0x80
  0x2A 0x80 0x2A 0x80 0xAA 0xA0 0x51 0x40
  0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

: octopus-head #6x7
  0x78 0xFC 0xFC 0xFC 0xFC 0x54 0x78

: dot
  0x80

: empty
  0x00 0x00 0x00 0x00 0x00 0x00 0x00

# food
: fish-left #7x3
  0x30 0x4A 0x84 0x7A 0x00 0x00 0x00
: fish-right #7x4
  0x18 0xA4 0x42 0xBC 0x00 0x00 0x00
: speck #3x3
  0x40 0xA0 0x40 0x00 0x00 0x00 0x00
: sushi #4x4
  0x60 0x90 0xF0 0x60 0x00 0x00 0x00
: shrimp-fried-left #7x7
  0x60 0x90 0x90 0x68 0x18 0x06 0x04
: shrimp-fried-right #7x7
  0x04 0x06 0x18 0x68 0x90 0x90 0x60
: donut #7x7
  0x38 0x44 0x92 0xAA 0x92 0x44 0x38
: chips #9x11 (SUPERCHIP)
  0xFF 0x80 0x40 0x80 0x40 0x80 0x8C 0x80
  0x92 0x80 0x92 0x80 0xA2 0x80 0xA4 0x80
  0x99 0x00 0x81 0x00 0xFF 0x80

: food-table
  i := empty              return
  i := fish-left          return
  i := fish-right         return
  i := speck              return
  i := sushi              return
  i := shrimp-fried-left  return
  i := shrimp-fried-right return
  i := donut              return
;

  :const FISHLEFT         1
  :const FIGHRIGHT        2
  :const SPECK            3
  :const SUSHI            4
  :const SHRIMPFRIEDLEFT  5
  :const SHRIMPFRIEDRIGHT 6
  :const DONUT            7
  :const CHIPS            8

: board-food
  # type ---  taken --- x pos --- y pos
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0x00      0x01      0x00      0x00
    0xFF      0x00      0x00      0x00


#-- setup --#

  # registers
  :alias arm1_x va
  :alias arm1_y vb
  :alias arm2_x vc
  :alias arm2_y vd

  # directions
  # these are all weird looking so that two cardinal directions
  # can be added together to make a diagonal direction
  #
  # UP + DOWN  -> 0
  # UP + RIGHT -> UPRIGHT
  #
  :const UP        -1
  :const LEFT      -3
  :const DOWN       1
  :const RIGHT      3
  :const UPLEFT    -4
  :const UPRIGHT    2
  :const STOP       0
  :const DOWNLEFT  -2
  :const DOWNRIGHT  4

  :const FALSE 0
  :const TRUE  1

  :const ARM1XOFFSET 0
  :const ARM1YOFFSET 7
  :const ARM2XOFFSET 6
  :const ARM2YOFFSET 7

  # game-state
  : arm1-direction -3
  : arm2-direction  3
  : current-level   1
  : food-remaining  4

: setup
  hires
;


#-- drawing --#

: draw-octopus
  # arguments:
  #   v1 -> octopus x pos
  #   v2 -> octopus y pos

  # draw the octopus head
  i := octopus-head
  sprite v1 v2 7

  # start arm1 (left) below the head
  v2 += ARM1YOFFSET
  arm1_x := v1
  arm1_y := v2
  draw-arm1

  # start arm2 (right) below the head
  v1 += ARM2XOFFSET
  arm2_x := v1
  arm2_y := v2
  draw-arm2
;

# draws the tentacle
: draw-arm1
  i := dot
  sprite arm1_x arm1_y 1
;

: draw-arm2
  i := dot
  sprite arm2_x arm2_y 1
;

: draw-board
  i  := board-food
  load v3
  # v0 -> food-type
  # v1 -> food-taken
  # v2 -> food-x
  # v3 -> food-y

  v4 := 0
  loop
    while v0 != 0xFF
      if v1 == 0 begin
        v0 <<= v0
        v0 <<= v0
        select-food
        sprite v2 v3 7
      end

      v4 += 4
      i  := board-food
      i  += v4
      load v3
  again
;

: select-food
  jump0 food-table
;


# -- levels -- #

: level-1
  # food-counter
  0x04

  # starting-position
  0x3C 0x18

: level-1-food
  # type ---  taken --- x pos --- y pos
    0x05      0x00      0x0A      0x0A
    0x07      0x00      0x70      0x0A
    0x04      0x00      0x16      0x20
    0x02      0x00      0x56      0x1B
    0xFF      0x00      0x00      0x00

: create-level-1
  clear

  i := level-1
  load v2
  # v0 -> number of foods
  # v1 -> starting x pos
  # v2 -> starting y pos

  i := food-remaining
  save v0

  draw-octopus

  # load the level 1 food into the board
  i := level-1-food
  load v3

  v4 := 0
  loop
    while v0 != 0xFF
      i := board-food
      i += v4
      save v3

      v4 += 4
      i  := level-1-food
      i  += v4
      load v3
  again

  draw-board
;

: level-2
  # food-counter
  0x06

  # starting-position
  0x10 0x06

: level-2-food
  # type ---  taken --- x pos --- y pos
    0x04      0x00      0x0A      0x24
    0x04      0x00      0x12      0x24
    0x04      0x00      0x1A      0x24
    0x04      0x00      0x22      0x24
    0x04      0x00      0x2A      0x24
    0x04      0x00      0x32      0x24
    0xFF      0x00      0x00      0x00

: create-level-2
  clear

  i := level-2
  load v2
  # v0 -> number of foods
  # v1 -> starting x pos
  # v2 -> starting y pos

  i := food-remaining
  save v0

  draw-octopus

  # load the level 1 food into the board
  i := level-2-food
  load v2

  v4 := 0
  loop
    while v0 != 0xFF
      i := board-food
      i += v4
      save v3

      v4 += 4
      i  := level-2-food
      i  += v4
      load v3
  again

  draw-board
;


# -- main --#

: main
  setup

  create-level-1

  loop
    steer-arm1
    move-arm1
    check-collision

    steer-arm2
    move-arm2
    check-collision

    next-level
  again
;

: steer-arm1
  :alias input v1

  i := arm1-direction
  load v0

# v1 -> new arm direction
  v2 := 0
  input := 0x2 #2
  if input key then v2 += UP
  input := 0x4 #q
  if input key then v2 += LEFT
  input := 0x5 #w
  if input key then v2 += DOWN
  input := 0x6 #e
  if input key then v2 += RIGHT

# can't stop won't stop
  if v2 == 0 then return

# no going back
  v1 := v0
  v1 += v2
  if v1 == 0 then return

  v0 := v2
  i  := arm1-direction
  save v0
;

: steer-arm2
  :alias input v1

  i := arm2-direction
  load v0

# v1 -> new arm direction
  v2 := 0
  input := 0x8 #s
  if input key then v2 += UP
  input := 0xA #z
  if input key then v2 += LEFT
  input := 0x0 #x
  if input key then v2 += DOWN
  input := 0xB #c
  if input key then v2 += RIGHT

# can't stop won't stop
  if v2 == 0 then return

# no going back
  v1 := v0
  v1 += v2
  if v1 == 0 then return

  v0 := v2
  i  := arm2-direction
  save v0
;

: move-arm1
  i := arm1-direction
  load v0
  v1 := 0
  v2 := 0
  translate-movement

  arm1_x += v1
  arm1_y += v2
  draw-arm1
;

: move-arm2
  i := arm2-direction
  load v0
  v1 := 0
  v2 := 0
  translate-movement

  arm2_x += v1
  arm2_y += v2
  draw-arm2
;

: translate-movement
  # arguments:
  #   v0 -> direction
  #   v1 -> x
  #   v2 -> y

  if v0 == UPLEFT    then v1 += -1
  if v0 == LEFT      then v1 += -1
  if v0 == DOWNLEFT  then v1 += -1
  if v0 == UPRIGHT   then v1 +=  1
  if v0 == RIGHT     then v1 +=  1
  if v0 == DOWNRIGHT then v1 +=  1

  if v0 == UPLEFT    then v2 += -1
  if v0 == UP        then v2 += -1
  if v0 == UPRIGHT   then v2 += -1
  if v0 == DOWNLEFT  then v2 +=  1
  if v0 == DOWN      then v2 +=  1
  if v0 == DOWNRIGHT then v2 +=  1
;

: collect-food
  i  := board-food
  load v3

  v4 := 0
  v5 := 0
  loop
    while v0 != 0xFF
      if v1 == 0 begin
        # draw the food twice - the first time we're guaranteed
        # collisions and if an arm has hit the food the redraw
        # will set vf appropriately
        v0 <<= v0
        v0 <<= v0
        select-food
        sprite v2 v3 7
        sprite v2 v3 7

        if vf == 1 begin
          v5 := 1

          # the arm has hit the food! collect it
          v0 >>= v0
          v0 >>= v0
          v1 := TRUE
          i  := board-food
          i  += v4
          save v1

          # and undraw it again
          v0 <<= v0
          v0 <<= v0
          select-food
          sprite v2 v3 7

          i  := food-remaining
          load v0
          v0 += -1
          i  := food-remaining
          save v0
        end
      end

      v4 += 4
      i  := board-food
      i  += v4
      load v3
  again

  vf := 0
  if v5 == 1 then vf := 1
;

: check-collision
  if vf == 1 begin
    # flash all foods that haven't been collected
    # and collect food that triggered conflict
    collect-food

    # if food was collected the game shouldn't end yet
    if vf == 1 then return

    game-over
  end
;

: next-level
  i := food-remaining
  load v0
  if v0 > 0 then return

  i  := current-level
  load v0

  v0 += 1
  i  := current-level
  save v0

  if v0 == 2 then create-level-2
  if v0 == 3 then game-over
;

: game-over
  loop
    draw-arm1
    v0    := 10
    delay := v0
    loop
      v0 := delay
      if v0 != 0 then
    again
  again
;
